/**
 * –ú–æ–¥—É–ª—å —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ –∏–≥—Ä–æ–∫–æ–≤, –Ω–∞–≥—Ä–∞–¥–∞–º–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
 */
import eventBus from './event-bus.js';

import { getText } from './localization.js';
import { showToast } from './ui-utils.js';

class AchievementSystem {
    constructor() {
        this.achievements = new Map();
        this.playerAchievements = new Map();
        this.achievementHistory = [];
        this.notifications = [];
        
        this.initializeAchievements();
        this.setupEventListeners();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     */
    initializeAchievements() {
        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –¥–µ–Ω—å–≥–∏
        this.addAchievement({
            id: 'first_money',
            name: '–ü–µ—Ä–≤—ã–µ –¥–µ–Ω—å–≥–∏',
            en_name: 'First Money',
            description: '–ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä–≤—ã–µ 1000‚ÇΩ',
            en_description: 'Earn your first 1000$',
            type: 'money',
            condition: 1000,
            icon: 'üí∞',
            rarity: 'common',
            points: 10,
            reward: { money: 100 }
        });

        this.addAchievement({
            id: 'millionaire',
            name: '–ú–∏–ª–ª–∏–æ–Ω–µ—Ä',
            en_name: 'Millionaire',
            description: '–ù–∞–∫–æ–ø–∏—Ç–µ 10,000‚ÇΩ',
            en_description: 'Accumulate 10,000$',
            type: 'money',
            condition: 10000,
            icon: 'üíé',
            rarity: 'rare',
            points: 50,
            reward: { money: 1000, title: '–ú–∏–ª–ª–∏–æ–Ω–µ—Ä' }
        });

        this.addAchievement({
            id: 'billionaire',
            name: '–ú–∏–ª–ª–∏–∞—Ä–¥–µ—Ä',
            en_name: 'Billionaire',
            description: '–ù–∞–∫–æ–ø–∏—Ç–µ 100,000‚ÇΩ',
            en_description: 'Accumulate 100,000$',
            type: 'money',
            condition: 100000,
            icon: 'üëë',
            rarity: 'epic',
            points: 100,
            reward: { money: 5000, title: '–ú–∏–ª–ª–∏–∞—Ä–¥–µ—Ä', special: 'golden_token' }
        });

        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å
        this.addAchievement({
            id: 'first_property',
            name: '–ü–µ—Ä–≤—ã–π –¥–æ–º–æ–≤–ª–∞–¥–µ–ª–µ—Ü',
            en_name: 'First Property Owner',
            description: '–ö—É–ø–∏—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
            en_description: 'Purchase your first property',
            type: 'properties',
            condition: 1,
            icon: 'üè†',
            rarity: 'common',
            points: 15,
            reward: { money: 200 }
        });

        this.addAchievement({
            id: 'property_tycoon',
            name: '–ù–µ–¥–≤–∏–∂–∏–º—ã–π –º–∞–≥–Ω–∞—Ç',
            en_name: 'Property Tycoon',
            description: '–í–ª–∞–¥–µ–π—Ç–µ 10 –æ–±—ä–µ–∫—Ç–∞–º–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
            en_description: 'Own 10 properties',
            type: 'properties',
            condition: 10,
            icon: 'üè¢',
            rarity: 'rare',
            points: 75,
            reward: { money: 1500, title: '–ú–∞–≥–Ω–∞—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏' }
        });

        this.addAchievement({
            id: 'property_empire',
            name: '–ò–º–ø–µ—Ä–∏—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
            en_name: 'Property Empire',
            description: '–í–ª–∞–¥–µ–π—Ç–µ 20 –æ–±—ä–µ–∫—Ç–∞–º–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
            en_description: 'Own 20 properties',
            type: 'properties',
            condition: 20,
            icon: 'üè∞',
            rarity: 'epic',
            points: 150,
            reward: { money: 3000, title: '–ò–º–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏' }
        });

        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Ä–µ–∑–∏–¥–µ–Ω—Ü–∏–∏
        this.addAchievement({
            id: 'first_residence',
            name: '–ü–µ—Ä–≤—ã–π –¥–æ–º',
            en_name: 'First Home',
            description: '–ü–æ—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Ä–µ–∑–∏–¥–µ–Ω—Ü–∏—é',
            en_description: 'Build your first residence',
            type: 'residences',
            condition: 1,
            icon: 'üè°',
            rarity: 'common',
            points: 25,
            reward: { money: 300 }
        });

        this.addAchievement({
            id: 'residence_builder',
            name: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å —Ä–µ–∑–∏–¥–µ–Ω—Ü–∏–π',
            en_name: 'Residence Builder',
            description: '–ü–æ—Å—Ç—Ä–æ–π—Ç–µ 5 —Ä–µ–∑–∏–¥–µ–Ω—Ü–∏–π',
            en_description: 'Build 5 residences',
            type: 'residences',
            condition: 5,
            icon: 'üèòÔ∏è',
            rarity: 'rare',
            points: 100,
            reward: { money: 2000, title: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å' }
        });

        this.addAchievement({
            id: 'residence_master',
            name: '–ú–∞—Å—Ç–µ—Ä —Ä–µ–∑–∏–¥–µ–Ω—Ü–∏–π',
            en_name: 'Residence Master',
            description: '–ü–æ—Å—Ç—Ä–æ–π—Ç–µ 10 —Ä–µ–∑–∏–¥–µ–Ω—Ü–∏–π',
            en_description: 'Build 10 residences',
            type: 'residences',
            condition: 10,
            icon: 'üèõÔ∏è',
            rarity: 'epic',
            points: 200,
            reward: { money: 5000, title: '–ú–∞—Å—Ç–µ—Ä —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞' }
        });

        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —É–ª—É—á—à–µ–Ω–∏—è
        this.addAchievement({
            id: 'first_improvement',
            name: '–ü–µ—Ä–≤–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ',
            en_name: 'First Improvement',
            description: '–£–ª—É—á—à–∏—Ç–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –¥–æ —É—Ä–æ–≤–Ω—è 1',
            en_description: 'Improve a property to level 1',
            type: 'improvements',
            condition: 1,
            icon: 'üîß',
            rarity: 'common',
            points: 20,
            reward: { money: 250 }
        });

        this.addAchievement({
            id: 'improvement_expert',
            name: '–≠–∫—Å–ø–µ—Ä—Ç –ø–æ —É–ª—É—á—à–µ–Ω–∏—è–º',
            en_name: 'Improvement Expert',
            description: '–£–ª—É—á—à–∏—Ç–µ 10 –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–µ–π –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è',
            en_description: 'Improve 10 properties to maximum level',
            type: 'improvements',
            condition: 10,
            icon: '‚ö°',
            rarity: 'rare',
            points: 125,
            reward: { money: 2500, title: '–≠–∫—Å–ø–µ—Ä—Ç' }
        });

        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Ç–æ—Ä–≥–æ–≤–ª—é
        this.addAchievement({
            id: 'first_trade',
            name: '–ü–µ—Ä–≤–∞—è —Å–¥–µ–ª–∫–∞',
            en_name: 'First Trade',
            description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Ç–æ—Ä–≥–æ–≤—É—é —Å–¥–µ–ª–∫—É',
            en_description: 'Complete your first trade deal',
            type: 'trades',
            condition: 1,
            icon: 'ü§ù',
            rarity: 'common',
            points: 30,
            reward: { money: 400 }
        });

        this.addAchievement({
            id: 'trade_master',
            name: '–ú–∞—Å—Ç–µ—Ä —Ç–æ—Ä–≥–æ–≤–ª–∏',
            en_name: 'Trade Master',
            description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ 10 —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫',
            en_description: 'Complete 10 trade deals',
            type: 'trades',
            condition: 10,
            icon: 'üíº',
            rarity: 'rare',
            points: 150,
            reward: { money: 3000, title: '–¢–æ—Ä–≥–æ–≤–µ—Ü' }
        });

        this.addAchievement({
            id: 'trade_legend',
            name: '–õ–µ–≥–µ–Ω–¥–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏',
            en_name: 'Trade Legend',
            description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ 50 —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫',
            en_description: 'Complete 50 trade deals',
            type: 'trades',
            condition: 50,
            icon: 'üéØ',
            rarity: 'legendary',
            points: 500,
            reward: { money: 10000, title: '–õ–µ–≥–µ–Ω–¥–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏', special: 'diamond_token' }
        });

        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∞—É–∫—Ü–∏–æ–Ω—ã
        this.addAchievement({
            id: 'first_auction',
            name: '–ü–µ—Ä–≤—ã–π –∞—É–∫—Ü–∏–æ–Ω',
            en_name: 'First Auction',
            description: '–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Å–≤–æ–µ–º –ø–µ—Ä–≤–æ–º –∞—É–∫—Ü–∏–æ–Ω–µ',
            en_description: 'Participate in your first auction',
            type: 'auctions',
            condition: 1,
            icon: 'üî®',
            rarity: 'common',
            points: 25,
            reward: { money: 300 }
        });

        this.addAchievement({
            id: 'auction_king',
            name: '–ö–æ—Ä–æ–ª—å –∞—É–∫—Ü–∏–æ–Ω–æ–≤',
            en_name: 'Auction King',
            description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ 5 –∞—É–∫—Ü–∏–æ–Ω–æ–≤',
            en_description: 'Win 5 auctions',
            type: 'auctions',
            condition: 5,
            icon: 'üëë',
            rarity: 'rare',
            points: 125,
            reward: { money: 2500, title: '–ö–æ—Ä–æ–ª—å –∞—É–∫—Ü–∏–æ–Ω–æ–≤' }
        });

        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∞–ª—å—è–Ω—Å—ã
        this.addAchievement({
            id: 'first_alliance',
            name: '–ü–µ—Ä–≤—ã–π –∞–ª—å—è–Ω—Å',
            en_name: 'First Alliance',
            description: '–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∞–ª—å—è–Ω—Å',
            en_description: 'Create your first alliance',
            type: 'alliances',
            condition: 1,
            icon: 'ü§ù',
            rarity: 'common',
            points: 40,
            reward: { money: 500 }
        });

        this.addAchievement({
            id: 'alliance_leader',
            name: '–õ–∏–¥–µ—Ä –∞–ª—å—è–Ω—Å–∞',
            en_name: 'Alliance Leader',
            description: '–°–æ–∑–¥–∞–π—Ç–µ 3 –∞–ª—å—è–Ω—Å–∞',
            en_description: 'Create 3 alliances',
            type: 'alliances',
            condition: 3,
            icon: 'üë•',
            rarity: 'rare',
            points: 175,
            reward: { money: 3500, title: '–õ–∏–¥–µ—Ä' }
        });

        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Ç—É—Ä–Ω–∏—Ä—ã
        this.addAchievement({
            id: 'first_tournament',
            name: '–ü–µ—Ä–≤—ã–π —Ç—É—Ä–Ω–∏—Ä',
            en_name: 'First Tournament',
            description: '–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Å–≤–æ–µ–º –ø–µ—Ä–≤–æ–º —Ç—É—Ä–Ω–∏—Ä–µ',
            en_description: 'Participate in your first tournament',
            type: 'tournaments',
            condition: 1,
            icon: 'üèÜ',
            rarity: 'common',
            points: 50,
            reward: { money: 600 }
        });

        this.addAchievement({
            id: 'tournament_champion',
            name: '–ß–µ–º–ø–∏–æ–Ω —Ç—É—Ä–Ω–∏—Ä–∞',
            en_name: 'Tournament Champion',
            description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ —Ç—É—Ä–Ω–∏—Ä',
            en_description: 'Win a tournament',
            type: 'tournament_wins',
            condition: 1,
            icon: 'ü•á',
            rarity: 'rare',
            points: 200,
            reward: { money: 5000, title: '–ß–µ–º–ø–∏–æ–Ω' }
        });

        this.addAchievement({
            id: 'tournament_legend',
            name: '–õ–µ–≥–µ–Ω–¥–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤',
            en_name: 'Tournament Legend',
            description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ 10 —Ç—É—Ä–Ω–∏—Ä–æ–≤',
            en_description: 'Win 10 tournaments',
            type: 'tournament_wins',
            condition: 10,
            icon: 'üåü',
            rarity: 'legendary',
            points: 1000,
            reward: { money: 20000, title: '–õ–µ–≥–µ–Ω–¥–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤', special: 'legendary_token' }
        });

        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –ø–æ–±–µ–¥—ã
        this.addAchievement({
            id: 'first_win',
            name: '–ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞',
            en_name: 'First Victory',
            description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∏–≥—Ä—É',
            en_description: 'Win your first game',
            type: 'wins',
            condition: 1,
            icon: 'üéâ',
            rarity: 'common',
            points: 100,
            reward: { money: 1000, title: '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å' }
        });

        this.addAchievement({
            id: 'winning_streak',
            name: '–°–µ—Ä–∏—è –ø–æ–±–µ–¥',
            en_name: 'Winning Streak',
            description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ 5 –∏–≥—Ä –ø–æ–¥—Ä—è–¥',
            en_description: 'Win 5 games in a row',
            type: 'winning_streak',
            condition: 5,
            icon: 'üî•',
            rarity: 'epic',
            points: 300,
            reward: { money: 7500, title: '–ù–µ—É—è–∑–≤–∏–º—ã–π' }
        });

        this.addAchievement({
            id: 'game_master',
            name: '–ú–∞—Å—Ç–µ—Ä –∏–≥—Ä—ã',
            en_name: 'Game Master',
            description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ 50 –∏–≥—Ä',
            en_description: 'Win 50 games',
            type: 'wins',
            condition: 50,
            icon: 'üéÆ',
            rarity: 'legendary',
            points: 1000,
            reward: { money: 25000, title: '–ú–∞—Å—Ç–µ—Ä –∏–≥—Ä—ã', special: 'master_token' }
        });

        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –≤—Ä–µ–º—è –∏–≥—Ä—ã
        this.addAchievement({
            id: 'dedicated_player',
            name: '–ü—Ä–µ–¥–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫',
            en_name: 'Dedicated Player',
            description: '–ò–≥—Ä–∞–π—Ç–µ 10 —á–∞—Å–æ–≤',
            en_description: 'Play for 10 hours',
            type: 'playtime',
            condition: 36000000, // 10 —á–∞—Å–æ–≤ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            icon: '‚è∞',
            rarity: 'common',
            points: 75,
            reward: { money: 800, title: '–ü—Ä–µ–¥–∞–Ω–Ω—ã–π' }
        });

        this.addAchievement({
            id: 'hardcore_player',
            name: '–•–∞—Ä–¥–∫–æ—Ä–Ω—ã–π –∏–≥—Ä–æ–∫',
            en_name: 'Hardcore Player',
            description: '–ò–≥—Ä–∞–π—Ç–µ 100 —á–∞—Å–æ–≤',
            en_description: 'Play for 100 hours',
            type: 'playtime',
            condition: 360000000, // 100 —á–∞—Å–æ–≤ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            icon: 'üí™',
            rarity: 'epic',
            points: 400,
            reward: { money: 8000, title: '–•–∞—Ä–¥–∫–æ—Ä–Ω—ã–π' }
        });

        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        this.addAchievement({
            id: 'weather_master',
            name: '–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –ø–æ–≥–æ–¥—ã',
            en_name: 'Weather Master',
            description: '–ò–≥—Ä–∞–π—Ç–µ –ø—Ä–∏ –≤—Å–µ—Ö —Ç–∏–ø–∞—Ö –ø–æ–≥–æ–¥—ã',
            en_description: 'Play during all weather types',
            type: 'weather_types',
            condition: 5,
            icon: 'üå§Ô∏è',
            rarity: 'rare',
            points: 150,
            reward: { money: 2000, title: '–ú–µ—Ç–µ–æ—Ä–æ–ª–æ–≥' }
        });

        this.addAchievement({
            id: 'event_explorer',
            name: '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏–π',
            en_name: 'Event Explorer',
            description: '–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ 10 —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö',
            en_description: 'Participate in 10 economic and cultural events',
            type: 'events',
            condition: 10,
            icon: 'üé™',
            rarity: 'rare',
            points: 200,
            reward: { money: 3000, title: '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å' }
        });

        // –°–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        this.addAchievement({
            id: 'bankrupt_phoenix',
            name: '–§–µ–Ω–∏–∫—Å',
            en_name: 'Phoenix',
            description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ –∏–≥—Ä—É –ø–æ—Å–ª–µ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞',
            en_description: 'Win a game after going bankrupt',
            type: 'secret',
            condition: 1,
            icon: 'ü¶Ö',
            rarity: 'legendary',
            points: 500,
            reward: { money: 10000, title: '–§–µ–Ω–∏–∫—Å', special: 'phoenix_token' },
            secret: true
        });

        this.addAchievement({
            id: 'lucky_winner',
            name: '–°—á–∞—Å—Ç–ª–∏–≤—á–∏–∫',
            en_name: 'Lucky One',
            description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ –∏–≥—Ä—É, –∏–º–µ—è –º–µ–Ω–µ–µ 1000‚ÇΩ –≤ –Ω–∞—á–∞–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–æ–¥–∞',
            en_description: 'Win a game with less than 1000$ at the start of the last turn',
            type: 'secret',
            condition: 1,
            icon: 'üçÄ',
            rarity: 'epic',
            points: 300,
            reward: { money: 5000, title: '–°—á–∞—Å—Ç–ª–∏–≤—á–∏–∫' },
            secret: true
        });
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º—É
     * @param {Object} achievement - –æ–±—ä–µ–∫—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     */
    addAchievement(achievement) {
        this.achievements.set(achievement.id, {
            ...achievement,
            unlocked: false,
            unlockedAt: null,
            progress: 0
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        eventBus.on('moneyChanged', data => this.checkMoneyAchievements(data.player));
        eventBus.on('propertyPurchased', data => this.checkPropertyAchievements(data.player));
        // Assuming 'residenceBuilt' event will be emitted
        eventBus.on('residenceBuilt', data => this.checkResidenceAchievements(data.player));
        // Assuming 'improvementAdded' event will be emitted
        eventBus.on('improvementAdded', data => this.checkImprovementAchievements(data.player));
        eventBus.on('tradeCompleted', data => this.checkTradeAchievements(data.offer.from, data.offer.to));
        eventBus.on('auctionEnded', data => data.winner && this.checkAuctionAchievements(data.winner));
        eventBus.on('allianceFormed', data => this.checkAllianceAchievements(data.players));
        eventBus.on('tournamentFinished', data => data.winners && this.checkTournamentAchievements(data.winners[0]));
        eventBus.on('gameEnded', data => data.winner && this.checkWinAchievements(data.winner));
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –¥–µ–Ω—å–≥–∏
     * @param {Player} player - –∏–≥—Ä–æ–∫
     */
    checkMoneyAchievements(player) {
        const totalMoney = player.money;
        
        this.achievements.forEach((achievement, id) => {
            if (achievement.type === 'money' && !achievement.unlocked) {
                if (totalMoney >= achievement.condition) {
                    this.unlockAchievement(player, id);
                }
            }
        });
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å
     * @param {Player} player - –∏–≥—Ä–æ–∫
     */
    checkPropertyAchievements(player) {
        const propertyCount = player.properties.length;
        
        this.achievements.forEach((achievement, id) => {
            if (achievement.type === 'properties' && !achievement.unlocked) {
                if (propertyCount >= achievement.condition) {
                    this.unlockAchievement(player, id);
                }
            }
        });
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Ä–µ–∑–∏–¥–µ–Ω—Ü–∏–∏
     * @param {Player} player - –∏–≥—Ä–æ–∫
     */
    checkResidenceAchievements(player) {
        const residenceCount = player.properties.filter(p => p.hasResidence).length;
        
        this.achievements.forEach((achievement, id) => {
            if (achievement.type === 'residences' && !achievement.unlocked) {
                if (residenceCount >= achievement.condition) {
                    this.unlockAchievement(player, id);
                }
            }
        });
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —É–ª—É—á—à–µ–Ω–∏—è
     * @param {Player} player - –∏–≥—Ä–æ–∫
     */
    checkImprovementAchievements(player) {
        const maxImprovements = player.properties.filter(p => p.improvementLevel >= 5).length;
        
        this.achievements.forEach((achievement, id) => {
            if (achievement.type === 'improvements' && !achievement.unlocked) {
                if (maxImprovements >= achievement.condition) {
                    this.unlockAchievement(player, id);
                }
            }
        });
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Ç–æ—Ä–≥–æ–≤–ª—é
     * @param {Player} player - –∏–≥—Ä–æ–∫
     * @param {Player} partner - –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –≤ —Å–¥–µ–ª–∫–µ
     */
    checkTradeAchievements(player, partner) {
        // This logic needs player stats to be updated. Assuming player.stats.totalTradesCompleted exists.
        [player, partner].forEach(p => {
            const tradeCount = p.stats.totalTradesCompleted || 0;
        this.achievements.forEach((achievement, id) => {
            if (achievement.type === 'trades' && !achievement.unlocked) {
                if (tradeCount >= achievement.condition) {
                    this.unlockAchievement(player, id);
                }
            }
        });
        });
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∞—É–∫—Ü–∏–æ–Ω—ã
     * @param {Player} player - –∏–≥—Ä–æ–∫
     */
    checkAuctionAchievements(player) {
        const auctionWins = player.stats.auctionsWon || 0;
        
        this.achievements.forEach((achievement, id) => {
            if (achievement.type === 'auctions' && !achievement.unlocked) {
                if (auctionWins >= achievement.condition) {
                    this.unlockAchievement(player, id);
                }
            }
        });
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∞–ª—å—è–Ω—Å—ã
     * @param {Player} player - –∏–≥—Ä–æ–∫
     */
    checkAllianceAchievements(players) {
        // This logic needs player stats. Assuming player.stats.alliancesFormed exists.
        players.forEach(p => {
            const allianceCount = p.stats.alliancesFormed || 0;
            this.achievements.forEach((achievement, id) => {
                if (achievement.type === 'alliances' && !achievement.unlocked) {
                    if (allianceCount >= achievement.condition) {
                        this.unlockAchievement(p, id);
                    }
                }
            });
        })
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Ç—É—Ä–Ω–∏—Ä—ã
     * @param {Player} player - –∏–≥—Ä–æ–∫
     */
    checkTournamentAchievements(player) {
        const tournamentWins = player.stats.tournamentsWon || 0;
        
        this.achievements.forEach((achievement, id) => {
            if (achievement.type === 'tournament_wins' && !achievement.unlocked) {
                if (tournamentWins >= achievement.condition) {
                    this.unlockAchievement(player, id);
                }
            }
        });
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –ø–æ–±–µ–¥—ã
     * @param {Player} player - –∏–≥—Ä–æ–∫
     */
    checkWinAchievements(player) {
        const wins = player.stats.gamesWon || 0;
        
        this.achievements.forEach((achievement, id) => {
            if (achievement.type === 'wins' && !achievement.unlocked) {
                if (wins >= achievement.condition) {
                    this.unlockAchievement(player, id);
                }
            }
        });
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –ø–æ–≥–æ–¥—É
     * @param {Player} player - –∏–≥—Ä–æ–∫
     */
    checkWeatherAchievements(player) {
        const weatherTypes = player.weatherTypes ? player.weatherTypes : new Set();
        
        this.achievements.forEach((achievement, id) => {
            if (achievement.type === 'weather_types' && !achievement.unlocked) {
                if (weatherTypes.size >= achievement.condition) {
                    this.unlockAchievement(player, id);
                }
            }
        });
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Å–æ–±—ã—Ç–∏—è
     * @param {Player} player - –∏–≥—Ä–æ–∫
     */
    checkEventAchievements(player) {
        const eventCount = player.events ? player.events.length : 0;
        
        this.achievements.forEach((achievement, id) => {
            if (achievement.type === 'events' && !achievement.unlocked) {
                if (eventCount >= achievement.condition) {
                    this.unlockAchievement(player, id);
                }
            }
        });
    }

    /**
     * –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
     * @param {Player} player - –∏–≥—Ä–æ–∫
     * @param {string} achievementId - ID –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     */
    unlockAchievement(player, achievementId) {
        const achievement = this.achievements.get(achievementId);
        if (!achievement || achievement.unlocked) return;

        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        achievement.unlocked = true;
        achievement.unlockedAt = Date.now();

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä–æ–∫–∞
        if (!player.achievements) {
            player.achievements = [];
        }
        player.achievements.push({
            id: achievementId,
            unlockedAt: Date.now()
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â—É—é –∏—Å—Ç–æ—Ä–∏—é
        this.achievementHistory.push({
            playerId: player.id,
            playerName: player.name,
            achievementId: achievementId,
            achievementName: achievement.name,
            unlockedAt: Date.now()
        });

        // –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã
        this.giveRewards(player, achievement.reward);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showAchievementNotification(achievement);

        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫
        if (window.audio) {
            window.audio.playSound('achievement');
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        this.dispatchAchievementEvent(player, achievement);
    }

    /**
     * –í—ã–¥–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
     * @param {Player} player - –∏–≥—Ä–æ–∫
     * @param {Object} reward - –Ω–∞–≥—Ä–∞–¥–∞
     */
    giveRewards(player, reward) {
        if (reward.money) {
            player.addMoney(reward.money);
        }

        if (reward.title) {
            if (!player.titles) {
                player.titles = [];
            }
            player.titles.push(reward.title);
        }

        if (reward.special) {
            if (!player.specialItems) {
                player.specialItems = [];
            }
            player.specialItems.push(reward.special);
        }
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
     * @param {Object} achievement - –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
     */
    showAchievementNotification(achievement) {
        const notification = {
            id: Date.now(),
            type: 'achievement',
            title: getText(`ACHIEVEMENTS.${achievement.name.toUpperCase()}`),
            message: getText(`ACHIEVEMENTS.${achievement.description.toUpperCase()}`),
            icon: achievement.icon,
            rarity: achievement.rarity,
            points: achievement.points,
            timestamp: Date.now()
        };

        this.notifications.push(notification);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ EventBus
        eventBus.emit('achievementNotification', { notification });
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
     * @param {Player} player - –∏–≥—Ä–æ–∫
     * @param {Object} achievement - –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
     */
    dispatchAchievementEvent(player, achievement) {
        eventBus.emit('achievementUnlocked', {
            player: player,
            achievement: achievement,
            timestamp: Date.now()
        });
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
     * @param {Player} player - –∏–≥—Ä–æ–∫
     * @returns {Array} –º–∞—Å—Å–∏–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    getPlayerAchievements(player) {
        return Array.from(this.achievements.values()).map(achievement => ({
            ...achievement,
            unlocked: player.achievements ? 
                player.achievements.some(a => a.id === achievement.id) : false,
            unlockedAt: player.achievements ? 
                player.achievements.find(a => a.id === achievement.id)?.unlockedAt : null
        }));
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–≥—Ä–æ–∫–∞
     * @param {Player} player - –∏–≥—Ä–æ–∫
     * @returns {Object} –ø—Ä–æ–≥—Ä–µ—Å—Å
     */
    getPlayerProgress(player) {
        const achievements = this.getPlayerAchievements(player);
        const unlocked = achievements.filter(a => a.unlocked);
        const totalPoints = unlocked.reduce((sum, a) => sum + a.points, 0);

        return {
            total: achievements.length,
            unlocked: unlocked.length,
            percentage: Math.round((unlocked.length / achievements.length) * 100),
            points: totalPoints,
            rarity: {
                common: unlocked.filter(a => a.rarity === 'common').length,
                rare: unlocked.filter(a => a.rarity === 'rare').length,
                epic: unlocked.filter(a => a.rarity === 'epic').length,
                legendary: unlocked.filter(a => a.rarity === 'legendary').length
            }
        };
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     * @returns {Object} —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
     */
    getAchievementStats() {
        const totalAchievements = this.achievements.size;
        const totalUnlocks = this.achievementHistory.length;
        const recentUnlocks = this.achievementHistory.filter(
            a => Date.now() - a.unlockedAt < 24 * 60 * 60 * 1000
        ).length;

        return {
            totalAchievements,
            totalUnlocks,
            recentUnlocks,
            averageUnlocksPerDay: Math.round(totalUnlocks / Math.max(1, Math.floor((Date.now() - this.achievementHistory[0]?.unlockedAt || Date.now()) / (24 * 60 * 60 * 1000))))
        };
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
     * @param {string} rarity - —Ä–µ–¥–∫–æ—Å—Ç—å
     * @returns {Array} –º–∞—Å—Å–∏–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    getAchievementsByRarity(rarity) {
        return Array.from(this.achievements.values()).filter(a => a.rarity === rarity);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     * @returns {Array} –º–∞—Å—Å–∏–≤ —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    getSecretAchievements() {
        return Array.from(this.achievements.values()).filter(a => a.secret);
    }

    /**
     * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
     * @param {Player} player - –∏–≥—Ä–æ–∫
     */
    resetPlayerAchievements(player) {
        player.achievements = [];
        this.achievementHistory = this.achievementHistory.filter(
            a => a.playerId !== player.id
        );
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    saveData() {
        const data = {
            achievementHistory: this.achievementHistory,
            notifications: this.notifications
        };
        localStorage.setItem('achievementData', JSON.stringify(data));
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    loadData() {
        try {
            const data = JSON.parse(localStorage.getItem('achievementData'));
            if (data) {
                this.achievementHistory = data.achievementHistory || [];
                this.notifications = data.notifications || [];
            }
        } catch (error) {
            console.warn('Failed to load achievement data:', error);
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å
export default AchievementSystem; 